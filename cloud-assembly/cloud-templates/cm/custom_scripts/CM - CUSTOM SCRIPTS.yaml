formatVersion: 1
inputs:
  _projectId_:
    type: string
    title: projectId
  _computeType_:
    type: string
    title: computeType
    readOnly: true
    $dynamicDefault: /data/vro-actions/com.vmk.inputs/getComputeType?zoneId={{zoneId}}
  zoneId:
    type: string
    title: Cloud
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getCloudZones?projectId={{_projectId_}}
  computeTag:
    type: string
    title: Compute
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getComputeTags?zoneId={{zoneId}}
  flavor:
    type: string
    title: Flavor
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getFlavors
  networkTag:
    type: string
    title: Network
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getNetworkTags?zoneId={{zoneId}}
  address:
    type: string
    title: IP Address
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getAvailableIPAddressesByNetworkTag?zoneId={{zoneId}}&networkTag={{networkTag}}&defaultValue
  image:
    type: string
    title: Image
    $dynamicEnum: /data/vro-actions/com.vmk.inputs/getImages
  username:
    type: string
    title: Username
  password:
    type: string
    title: Password
    encrypted: true
resources:
  scripts:
    type: Custom.Scripts
    metadata:
      layoutPosition:
        - 0
        - 0
    properties:
      osType: linux
      password: ${input.password}
      username: ${input.username}
      instances:
        - ${resource.vm.id}
      install: |
        sudo apt install -y apache2
        sudo systemctl restart apache2
        echo ' [">> $output" expression extract stdout to output property] ' >> $output
        echo " [only running when first boot per vm] " >> $output
      configure: |
        echo " [every running when deployment updated and first boot per vm] " >> $output
      destroy: |
        echo " [only running when destroying per vm] " >> $output
  vm:
    type: Cloud.Machine
    metadata:
      layoutPosition:
        - 1
        - 0
    properties:
      name: vm-custom-scripts
      image: ${input.image}
      flavor: ${input.flavor}
      placementPolicy: ${input._computeType_=="vmw"?"true":"false"}
      networks:
        - network: ${resource.net.id}
          assignment: static
          address: ${input.address!=""?input.address:null}
      constraints:
        - tag: ${input.computeTag}
      cloudConfig: |
        #cloud-config
        users:
          - name: ${input.username}
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            groups: [adm, sudo, wheel, users]
            lock_passwd: false
        chpasswd:
          list: |
            ${input.username}:${input.password}
          expire: False
        ssh_pwauth: true
  net:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 2
        - 0
    properties:
      networkType: existing
      constraints:
        - tag: ${input.networkTag}
