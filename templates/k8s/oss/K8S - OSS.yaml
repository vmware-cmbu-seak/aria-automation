formatVersion: 1
inputs:
  name:
    type: string
    title: Name
  _projectId_:
    type: string
    title: projectId
  _computeType_:
    type: string
    title: computeType
    readOnly: true
    $dynamicDefault: /data/vro-actions/com.vmk.inputs/getComputeType?zoneId={{zoneId}}
  _insecureRegistry_:
    type: string
    title: insecureRegistry
    readOnly: true
    default: '"0.0.0.0/0"'
  _syslogServer_:
    type: string
    title: syslogServer
    readOnly: true
    default: vrli.vmkloud.com
  _syslogProto_:
    type: string
    title: syslogProto
    readOnly: true
    default: udp
    enum:
      - tcp
      - udp
  _syslogPort_:
    type: number
    title: syslogPort
    readOnly: true
    default: 514
  _image_:
    type: string
    title: image
    readOnly: true
    default: ubuntu20
  zoneId:
    type: string
    title: Cloud
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getCloudZones?projectId={{_projectId_}}
  computeTag:
    type: string
    title: Compute
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getComputeTags?zoneId={{zoneId}}
  masterFlavor:
    type: string
    title: Master Flavor
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getFlavors
  workerFlavor:
    type: string
    title: Worker Flavor
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getFlavors
  workerCluster:
    type: number
    title: Worker Cluster
    default: 2
    minimum: 1
    maximum: 5
  networkTag:
    type: string
    title: Network
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getNetworkTags?zoneId={{zoneId}}
  apiServerIP:
    type: string
    title: API Server IP
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getAvailableIPAddressesByNetworkTag?zoneId={{zoneId}}&networkTag={{networkTag}}&defaultValue
  cni:
    type: string
    title: CNI Plugin
    default: antrea
    oneOf:
      - title: Flannel
        const: flannel
      - title: Calico
        const: calico
      - title: Antrea
        const: antrea
  version:
    type: string
    title: Version
    default: 1.21.10-00
    oneOf:
      - title: 1.19.16
        const: 1.19.16-00
      - title: 1.20.15
        const: 1.20.15-00
      - title: 1.21.10
        const: 1.21.10-00
      - title: latest
        const: latest
  username:
    type: string
    title: Username
  password:
    type: string
    title: Password
    encrypted: true
resources:
  endpoint:
    type: Custom.Kubernetes
    metadata:
      layoutPosition:
        - 0
        - 0
    properties:
      name: oss-${to_lower(env.projectName)}-${to_lower(input.name)}
      clusterType: external
      project: ${env.projectName}
      kubeConfig: ${resource.masterScripts.outputs}
      clusterManifest: |
        ---
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: vrops-cadvisor
          namespace: kube-system
          labels:
            app: vrops-cadvisor
          annotations:
              seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        spec:
          selector:
            matchLabels:
              app: vrops-cadvisor
          template:
            metadata:
              labels:
                app: vrops-cadvisor
                version: v0.33.0
            spec:
              tolerations:
              - key: node-role.kubernetes.io/master
                effect: NoSchedule
              containers:
              - name: vrops-cadvisor
                image: google/cadvisor:v0.33.0
                resources:
                  requests:
                    memory: 250Mi
                    cpu: 250m
                  limits:
                    cpu: 400m
                volumeMounts:
                - name: rootfs
                  mountPath: /rootfs
                  readOnly: true
                - name: var-run
                  mountPath: /var/run
                  readOnly: true
                - name: sys
                  mountPath: /sys
                  readOnly: true
                - name: docker
                  mountPath: /var/lib/docker
                  readOnly: true
                - name: disk
                  mountPath: /dev/disk
                  readOnly: true
                ports:
                  - name: http
                    containerPort: 8080
                    hostPort : 31194
                    protocol: TCP
              automountServiceAccountToken: false
              terminationGracePeriodSeconds: 30
              volumes:
              - name: rootfs
                hostPath:
                  path: /
              - name: var-run
                hostPath:
                  path: /var/run
              - name: sys
                hostPath:
                  path: /sys
              - name: docker
                hostPath:
                  path: /var/lib/docker
              - name: disk
                hostPath:
                  path: /dev/disk
        ---
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: fluentd
          namespace: kube-system
          labels:
            k8s-app: fluentd-logging
            version: v1
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: fluentd
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - namespaces
          verbs:
          - get
          - list
          - watch
        ---
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: fluentd
        roleRef:
          kind: ClusterRole
          name: fluentd
          apiGroup: rbac.authorization.k8s.io
        subjects:
        - kind: ServiceAccount
          name: fluentd
          namespace: kube-system
        ---
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: fluentd
          namespace: kube-system
          labels:
            k8s-app: fluentd-logging
            version: v1
        spec:
          selector:
            matchLabels:
              k8s-app: fluentd-logging
          template:
            metadata:
              labels:
                k8s-app: fluentd-logging
                version: v1
            spec:
              serviceAccount: fluentd
              serviceAccountName: fluentd
              tolerations:
              - key: node-role.kubernetes.io/master
                effect: NoSchedule
              containers:
              - name: fluentd
                image: fluent/fluentd-kubernetes-daemonset:v1-debian-syslog
                env:
                  - name:  SYSLOG_HOST
                    value: "${input._syslogServer_}"
                  - name:  SYSLOG_PORT
                    value: "${input._syslogPort_}"
                  - name:  SYSLOG_PROTOCOL
                    value: "${input._syslogProto_}"
                resources:
                  limits:
                    memory: 200Mi
                  requests:
                    cpu: 100m
                    memory: 200Mi
                volumeMounts:
                - name: varlog
                  mountPath: /var/log
                - name: dockercontainerlogdirectory
                  mountPath: /var/log/pods
                  readOnly: true
              terminationGracePeriodSeconds: 30
              volumes:
              - name: varlog
                hostPath:
                  path: /var/log
              - name: dockercontainerlogdirectory
                hostPath:
                  path: /var/log/pods
  cert:
    type: Custom.Cert
    metadata:
      layoutPosition:
        - 0
        - 1
    properties:
      instances: ${[resource.master.id] + resource.worker[*].id}
      username: ${input.username}
      password: ${input.password}
  masterScripts:
    type: Custom.Scripts
    metadata:
      layoutPosition:
        - 1
        - 0
    properties:
      instances:
        - ${resource.master.id}
      osType: linux
      username: ${input.username}
      password: ${input.password}
      install: |
        # cni plugin
        KUBE_CNI="${input.cni}"
        POD_NETWORK_CIDR="10.244.0.0/16"
        if [ "$KUBE_CNI" == "flannel" ]; then
          CNI_SOURCE="https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml"
        elif [ "$KUBE_CNI" == "calico" ]; then
          CNI_SOURCE="https://docs.projectcalico.org/manifests/calico.yaml"
        elif [ "$KUBE_CNI" == "antrea" ]; then
          CNI_SOURCE="https://raw.githubusercontent.com/antrea-io/antrea/main/build/yamls/antrea.yml"
        else
          KUBE_CNI="antrea"
          CNI_SOURCE="https://raw.githubusercontent.com/antrea-io/antrea/main/build/yamls/antrea.yml"
        fi
        # install Packages
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        curl https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
        sudo apt update && sudo apt upgrade -y
        sudo apt install docker-ce -y
        sudo cp /tmp/daemon.json /etc/docker/daemon.json
        sudo systemctl restart docker
        ${input.version=="latest"?"sudo apt install -y kubelet kubeadm kubectl":"sudo apt install -y kubelet=" + input.version + " kubeadm=" + input.version + " kubectl=" + input.version}
        sudo swapoff -a
        sudo sed -i '/swap/d' /etc/fstab
        # init kubernetes
        sudo -H kubeadm init --pod-network-cidr="$POD_NETWORK_CIDR" --apiserver-advertise-address="0.0.0.0" --apiserver-cert-extra-sans="${resource.master.networks[0].address}"
        sudo mkdir -p /root/.kube /home/${input.username}/.kube
        sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config
        sudo cp -i /etc/kubernetes/admin.conf /home/${input.username}/.kube/config
        sudo chown root:root /root/.kube/config
        sudo chown -R ${input.username}:${input.username} /home/${input.username}/.kube
        # start cni
        sudo kubectl apply -f "$CNI_SOURCE"
        # start monitoring
        sudo kubectl apply -f /tmp/fluentd.yaml
        sudo kubectl apply -f /tmp/cadvisor.yaml
        # to output kubeconfig
        cat /home/${input.username}/.kube/config >> $output
  workerScripts:
    type: Custom.Scripts
    dependsOn:
      - masterScripts
      - cert
    metadata:
      layoutPosition:
        - 1
        - 1
    properties:
      instances: ${resource.worker[*].id}
      osType: linux
      username: ${input.username}
      password: ${input.password}
      install: |
        # install Packages
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        curl https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
        sudo apt update && sudo apt upgrade -y
        sudo apt install docker-ce -y
        sudo cp /tmp/daemon.json /etc/docker/daemon.json
        sudo systemctl restart docker
        ${input.version=="latest"?"sudo apt install -y kubelet kubeadm kubectl":"sudo apt install -y kubelet=" + input.version + " kubeadm=" + input.version + " kubectl=" + input.version}
        sudo swapoff -a
        sudo sed -i '/swap/d' /etc/fstab
        # join kubernetes
        echo "${resource.master.networks[0].address} master" | sudo tee -a /etc/hosts
        JOIN_CMD=$(ssh master "kubeadm token create --print-join-command")
        sudo -H $JOIN_CMD
      destroy: |
        ssh master kubectl drain --ignore-daemonsets --force $(hostname | tr [:upper:] [:lower:])
        ssh master kubectl delete node --force $(hostname | tr [:upper:] [:lower:])
  master:
    type: Cloud.Machine
    metadata:
      layoutPosition:
        - 2
        - 0
    properties:
      image: ${input._image_}
      flavor: ${input.masterFlavor}
      placementPolicy: ${input._computeType_=="vmw"?"true":"false"}
      constraints:
        - tag: ${input.computeTag}
      networks: ${[{"network":resource.net.id,"assignment":"static","address":(input.apiServerIP!=""?input.apiServerIP:null)}]}
      cloudConfigSettings: ${input._computeType_!="vmw"?{"phoneHomeShouldWait":true,"phoneHomeTimeoutSeconds":60,"phoneHomeFailOnTimeout":false}:null}
      cloudConfig: |
        #cloud-config
        users:
          - name: ${input.username}
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            groups: adm, sudo, wheel, users
            lock_passwd: false
        chpasswd:
          list: |
            ${input.username}:${input.password}
          expire: False
        ssh_pwauth: true
        write_files:
          - path: /tmp/daemon.json
            permissions: '0600'
            owner: root:root
            content: |
              {
                  "insecure-registries": [${input._insecureRegistry_}]
              }
  worker:
    type: Cloud.Machine
    metadata:
      layoutPosition:
        - 2
        - 1
    properties:
      image: ${input._image_}
      flavor: ${input.workerFlavor}
      count: ${input.workerCluster}
      placementPolicy: ${input._computeType_=="vmw"?"true":"false"}
      constraints:
        - tag: ${input.computeTag}
      networks:
        - network: ${resource.net.id}
          assignment: static
      cloudConfigSettings: ${input._computeType_!="vmw"?{"phoneHomeShouldWait":true,"phoneHomeTimeoutSeconds":60,"phoneHomeFailOnTimeout":false}:null}
      cloudConfig: |
        #cloud-config
        users:
          - name: ${input.username}
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            groups: adm, sudo, wheel, users
            lock_passwd: false
        chpasswd:
          list: |
            ${input.username}:${input.password}
          expire: False
        ssh_pwauth: true
        write_files:
          - path: /tmp/daemon.json
            permissions: '0600'
            owner: root:root
            content: |
              {
                  "insecure-registries": [${input._insecureRegistry_}]
              }
  net:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 3
        - 0
    properties:
      networkType: existing
      constraints:
        - tag: ${input.networkTag}
