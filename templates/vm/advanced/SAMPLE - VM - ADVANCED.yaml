formatVersion: 1
inputs:
  _projectId_:
    type: string
    title: projectId
  _computeType_:
    type: string
    title: computeType
    readOnly: true
    $dynamicDefault: /data/vro-actions/com.vmk.inputs/getComputeType?zoneId={{zoneId}}
  zoneId:
    type: string
    title: Cloud
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getCloudZones?projectId={{_projectId_}}
  computeTag:
    type: string
    title: Compute
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getComputeTags?zoneId={{zoneId}}
  flavor:
    type: string
    title: Flavor
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getFlavors
  vms:
    type: number
    title: VMs
    minimum: 1
    default: 1
  networks:
    type: number
    title: Networks
    minimum: 1
    maximum: 3
    default: 1
  publicIpAddress:
    type: boolean
    title: Public Address
    default: false
  net1:
    type: string
    title: Network 1
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getNetworkTags?zoneId={{zoneId}}
  addr1:
    type: string
    title: Address 1
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getAvailableIPAddressesByNetworkTag?zoneId={{zoneId}}&networkTag={{net1}}&defaultValue
  fw1:
    type: array
    title: Network 1 FW
    default: []
    items:
      type: object
      title: Rule
      properties:
        name:
          type: string
          title: Name
        direction:
          type: string
          title: Direction
          oneOf:
            - title: IN
              const: inbound
            - title: OUT
              const: outbound
        source:
          type: string
          title: Source
        destination:
          type: string
          title: Destination
        protocol:
          type: string
          title: Protocol
          enum:
            - ANY
            - ICMP
            - TCP
            - UDP
        ports:
          type: string
          title: Ports
        access:
          type: string
          title: Access
          oneOf:
            - title: ALLOW
              const: Allow
            - title: DROP
              const: Drop
            - title: DENY
              const: Deny
  net2:
    type: string
    title: Network 2
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getNetworkTags?zoneId={{zoneId}}&defaultValue
  addr2:
    type: string
    title: Address 2
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getAvailableIPAddressesByNetworkTag?zoneId={{zoneId}}&networkTag={{net2}}&defaultValue
  fw2:
    type: array
    title: Network 2 FW
    default: []
    items:
      type: object
      title: Rule
      properties:
        name:
          type: string
          title: Name
        direction:
          type: string
          title: Direction
          oneOf:
            - title: IN
              const: inbound
            - title: OUT
              const: outbound
        source:
          type: string
          title: Source
        destination:
          type: string
          title: Destination
        protocol:
          type: string
          title: Protocol
          enum:
            - ANY
            - ICMP
            - TCP
            - UDP
        ports:
          type: string
          title: Ports
        access:
          type: string
          title: Access
          oneOf:
            - title: ALLOW
              const: Allow
            - title: DROP
              const: Drop
            - title: DENY
              const: Deny
  net3:
    type: string
    title: Network 3
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getNetworkTags?zoneId={{zoneId}}&defaultValue
  addr3:
    type: string
    title: Address 3
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getAvailableIPAddressesByNetworkTag?zoneId={{zoneId}}&networkTag={{net3}}&defaultValue
  fw3:
    type: array
    title: Network 3 FW
    default: []
    items:
      type: object
      title: Rule
      properties:
        name:
          type: string
          title: Name
        direction:
          type: string
          title: Direction
          oneOf:
            - title: IN
              const: inbound
            - title: OUT
              const: outbound
        source:
          type: string
          title: Source
        destination:
          type: string
          title: Destination
        protocol:
          type: string
          title: Protocol
          enum:
            - ANY
            - ICMP
            - TCP
            - UDP
        ports:
          type: string
          title: Ports
        access:
          type: string
          title: Access
          oneOf:
            - title: ALLOW
              const: Allow
            - title: DROP
              const: Drop
            - title: DENY
              const: Deny
  lbAddr:
    type: string
    title: Load Balancer Address
    default: ''
    $dynamicEnum: /data/vro-actions/com.vmk.inputs.blueprint/getAvailableIPAddressesByNetworkTag?zoneId={{zoneId}}&networkTag={{net1}}&defaultValue
  lb:
    type: array
    title: Load Balancer
    default: []
    items:
      type: object
      title: Virtual Server
      properties:
        protocol:
          type: string
          title: Front End Protocol
          enum:
            - TCP
            - HTTP
            - HTTPS
        port:
          type: number
          title: Front End Port
          default: 80
          minimum: 1
          maximum: 65535
        instanceProtocol:
          type: string
          title: Back End Protocol
          enum:
            - TCP
            - HTTP
            - HTTPS
        instancePort:
          type: number
          title: Back End Port
          default: 80
          minimum: 1
          maximum: 65535
        algorithm:
          type: string
          title: Algorithm
          enum:
            - ROUND_ROBIN
            - WEIGHTED_ROUND_ROBIN
            - LEAST_CONNECTION
            - WEIGHTED_LEAST_CONNECTION
            - IP_HASH
            - URI
            - URL
            - HTTP_HEADER
        healthCheckConfiguration:
          type: object
          title: Health Check
          properties:
            protocol:
              type: string
              title: Health Check Protocol
              enum:
                - TCP
                - HTTP
                - HTTPS
            port:
              type: number
              title: Health Check Port
              default: 80
              minimum: 1
              maximum: 65535
            urlPath:
              type: string
              title: Health Check URL
            intervalSeconds:
              type: number
              title: Interval Seconds
              default: 10
              minimum: 5
            timeoutSeconds:
              type: number
              title: Timeout Seconds
              default: 5
              minimum: 5
            healthyThreshold:
              type: number
              title: Healthy Threshold
              default: 3
              minimum: 1
            unhealthyThreshold:
              type: number
              title: Unhealthy Threshold
              default: 3
              minimum: 1
  disks:
    type: array
    title: Disks
    default: []
    maxItems: 3
    items:
      type: object
      title: Disk
      properties:
        size:
          type: number
          title: Size
          minimum: 1
          maximum: 2048
  image:
    type: string
    title: Image
    $dynamicEnum: /data/vro-actions/com.vmk.inputs/getImages
  packageUpdate:
    type: boolean
    title: Package Update
    default: false
  packageUpgrade:
    type: boolean
    title: Package Upgrade
    default: false
  packages:
    type: array
    title: Packages
    default: []
    items:
      type: string
  bootScripts:
    type: string
    title: Boot Scripts
    default: ''
  installScripts:
    type: string
    title: Install Scripts
    default: ''
  configureScripts:
    type: string
    title: Configure Scripts
    default: ''
  destroyScripts:
    type: string
    title: Destroy Scripts
    default: ''
  username:
    type: string
    title: Username
  password:
    type: string
    encrypted: true
    title: Password
resources:
  scripts:
    type: Custom.Scripts
    metadata:
      layoutPosition:
        - 0
        - 1
    properties:
      count: ${input.installScripts!=""||input.configureScripts!=""||input.destroyScripts!=""?1:0}
      instances: ${resource.vm[*].id}
      osType: linux
      username: ${input.username}
      password: ${input.password}
      install: ${input.installScripts}
      configure: ${input.configureScripts}
      destroy: ${input.destroyScripts}
  lb:
    type: Cloud.LoadBalancer
    metadata:
      layoutPosition:
        - 1
        - 0
    properties:
      count: ${length(input.lb)>=1?1:0}
      address: ${input.lbAddr!=""?input.lbAddr:null}
      routes: ${input.lb}
      network: ${resource.net1.id}
      instances: ${resource.vm[*].id}
      internetFacing: ${input._computeType_=="vmw"?"false":"true"}
  vm:
    type: Cloud.Machine
    metadata:
      layoutPosition:
        - 1
        - 1
    allocatePerInstance: true
    properties:
      count: ${input.vms}
      image: ${input.image}
      flavor: ${input.flavor}
      placementPolicy: ${input._computeType_=="vmw"?"true":"false"}
      constraints:
        - tag: ${input.computeTag}
      networks: ${[{"network":resource.net1.id,"assignment":"static","address":(input.addr1!=""?input.addr1:null),"securityGroups":resource.fw1[*].id,"deviceIndex":0,"assignPublicIpAddress":input.publicIpAddress}]+[input.networks>=2?{"network":resource.net2[*].id[0],"assignment":"static","address":(input.addr2!=""?input.addr2:null),"securityGroups":resource.fw2[*].id,"deviceIndex":1}:null]+[input.networks>=3?{"network":resource.net3[*].id[0],"assignment":"static","address":(input.addr3!=""?input.addr3:null),"securityGroups":resource.fw3[*].id,"deviceIndex":2}:null]}
      attachedDisks: ${map_to_object(length(input.disks)>=1?slice(resource.disk1[*].id, count.index, count.index+1):[], "source") + map_to_object(length(input.disks)>=2?slice(resource.disk2[*].id, count.index, count.index+1):[], "source") + map_to_object(length(input.disks)>=3?slice(resource.disk3[*].id, count.index, count.index+1):[], "source")}
      cloudConfig: |
        #cloud-config
        users:
          - name: ${input.username}
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            groups: adm, sudo, wheel, users
            lock_passwd: false
        chpasswd:
          list: |
            ${input.username}:${input.password}
          expire: False
        ssh_pwauth: true
        package_update: ${input.packageUpdate==true?"true":"false"}
        package_upgrade: ${input.packageUpgrade==true?"true":"false"}
        packages: ${input.packages}
        runcmd:
          - echo "${base64_encode(input.bootScripts)}" | base64 -d | tee /tmp/init.sh
          - chmod 755 /tmp/init.sh
          - /tmp/init.sh > /tmp/init.log
          - rm -rf /tmp/init.sh
  fw1:
    type: Cloud.SecurityGroup
    metadata:
      layoutPosition:
        - 2
        - 0
    properties:
      securityGroupType: new
      count: ${length(input.fw1)>=1?1:0}
      rules: ${input.fw1}
  disk1:
    type: Cloud.Volume
    metadata:
      layoutPosition:
        - 2
        - 1
    allocatePerInstance: true
    properties:
      count: ${length(input.disks)>=1?input.vms:0}
      capacityGb: ${input.disks[0].size}
      SCSIController: SCSI_Controller_1
      unitNumber: 0
  fw2:
    type: Cloud.SecurityGroup
    metadata:
      layoutPosition:
        - 3
        - 0
    properties:
      securityGroupType: new
      count: ${input.networks>=2&&length(input.fw2)>=1?1:0}
      rules: ${input.fw2}
  disk2:
    type: Cloud.Volume
    metadata:
      layoutPosition:
        - 3
        - 1
    allocatePerInstance: true
    properties:
      count: ${length(input.disks)>=2?input.vms:0}
      capacityGb: ${input.disks[1].size}
      SCSIController: SCSI_Controller_1
      unitNumber: 1
  fw3:
    type: Cloud.SecurityGroup
    metadata:
      layoutPosition:
        - 4
        - 0
    properties:
      securityGroupType: new
      count: ${input.networks>=3&&length(input.fw3)>=1?1:0}
      rules: ${input.fw3}
  disk3:
    type: Cloud.Volume
    metadata:
      layoutPosition:
        - 4
        - 1
    allocatePerInstance: true
    properties:
      count: ${length(input.disks)>=3?input.vms:0}
      capacityGb: ${input.disks[2].size}
      SCSIController: SCSI_Controller_1
      unitNumber: 2
  net1:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 5
        - 0
    properties:
      networkType: ${contains(input.net1,"routed")?"routed":(contains(input.net1,"outbound")?"outbound":"existing")}
      constraints:
        - tag: ${input.net1}
  net2:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 6
        - 0
    properties:
      networkType: ${contains(input.net2,"routed")?"routed":(contains(input.net2,"outbound")?"outbound":"existing")}
      constraints:
        - tag: ${input.net2}
      count: ${input.networks>=2?1:0}
  net3:
    type: Cloud.Network
    metadata:
      layoutPosition:
        - 7
        - 0
    properties:
      networkType: ${contains(input.net3,"routed")?"routed":(contains(input.net3,"outbound")?"outbound":"existing")}
      constraints:
        - tag: ${input.net3}
      count: ${input.networks>=3?1:0}
